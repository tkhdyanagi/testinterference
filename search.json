[{"path":"https://tkhdyanagi.github.io/testinterference/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 testinterference authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"vignette describes testing procedure implemented testinterference() function hypothesis = \"Fisher\".","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"Consider finite population \\(n\\) units, \\([n] = \\{ 1, \\dots, n \\}\\). Let \\(\\mathbf{Z} = (Z_1, \\dots, Z_n)\\) denote \\(n\\)-dimensional binary vector realized treatment assignments. Suppose \\(\\mathbf{Z} \\sim \\mathbb{P}_{\\mathbf{Z}}\\) known assignment probability \\(\\mathbb{P}_{\\mathbf{Z}}\\) (.e., experimental design). instance, \\(\\mathbb{P}_{\\mathbf{Z}}\\) may Bernoulli randomization, complete randomization, stratified randomization, experimental designs. write set possible assignment patterns \\(\\mathcal{Z} = \\{ \\mathbf{z} \\\\{ 0, 1 \\}^n: \\mathbb{P}_{\\mathbf{Z}}(\\mathbf{z}) > 0 \\}\\). Let \\(\\mathbf{Y} = (Y_1, \\dots, Y_n)\\), \\(Y_i\\) denotes outcome variable unit \\(\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"null-hypothesis","dir":"Articles","previous_headings":"","what":"Null Hypothesis","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"Suppose interference outcome unit depend others’ treatment assignments. , potential outcome unit \\(\\) given \\(Z_i = z\\) \\(z \\\\{ 0, 1 \\}\\) well defined, denote \\(Y_i(z)\\). Fisher’s sharp null hypothesis \\[\\begin{align*}     \\mathbb{H}_0: \\quad     Y_i(1) = Y_i(0)     \\quad \\text{$\\[n]$}. \\end{align*}\\] states outcome unit depend unit’s treatment assignment. find statistical evidence hypothesis, suggests presence treatment effects.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"randomization-test","dir":"Articles","previous_headings":"","what":"Randomization Test","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"main idea behind testing null hypothesis check whether outcome distribution given \\(Z_i = 1\\) identical given \\(Z_i = 0\\). Specifically, testing procedure follows: Choose test statistic \\(T(\\mathbf{z}, \\mathbf{y})\\). Compute \\(T(\\mathbf{Z}, \\mathbf{Y})\\) realized treatment assignment \\(\\mathbf{Z}\\) observed outcome \\(\\mathbf{Y}\\). Draw \\(\\mathbf{z}^{(r)}\\) independently \\(\\mathbb{P}_{\\mathbf{Z}}\\). Compute \\(T(\\mathbf{z}^{(r)}, \\mathbf{Y})\\) \\(\\mathbb{H}_0\\). Repeat two steps \\(R\\) times. Compute \\(p\\)-value \\[\\begin{align*}   \\text{$p$-value}   = \\frac{1}{R} \\sum_{r=1}^{R} \\mathbf{1}\\{ T(\\mathbf{z}^{(r)}, \\mathbf{Y}) \\ge T(\\mathbf{Z}, \\mathbf{Y}) \\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test Statistics","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"testinterference package, consider three test statistics. Kruskal-Wallis (KW) Average cross difference (ACD) Ordinary least squares (OLS) define statistics, add notations. given treatment assignment \\(\\mathbf{z}\\), partition sample 2 groups: \\[\\begin{align*}     \\mathcal{S}_1(\\mathbf{z}) & = \\{ \\[n]: Z_i = 0 \\}, \\\\     \\mathcal{S}_2(\\mathbf{z}) & = \\{ \\[n]: Z_i = 1 \\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"kw-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"KW statistic","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"begin ranking \\((Y_1, \\dots, Y_n)\\) 1 \\(n\\). Let \\(v_i\\) rank \\(Y_i\\) \\(V_j(\\mathbf{z})\\) summation ranks group \\(\\mathcal{S}_j(\\mathbf{z})\\): \\(V_j(\\mathbf{z}) = \\sum_{\\\\mathcal{S}_j(\\mathbf{z})} v_i\\), \\(j = 1, 2\\). KW statistic compares average rank group \\(j\\), \\(V_j(\\mathbf{z}) / |\\mathcal{S}_j(\\mathbf{z})|\\), average rank whole sample, \\((n + 1) / 2\\): \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\frac{12}{n (n + 1)} \\sum_{j=1}^2 | \\mathcal{S}_j(\\mathbf{z}) | \\left( \\frac{ V_j(\\mathbf{z}) }{ |\\mathcal{S}_j(\\mathbf{z})| } - \\frac{n + 1}{2} \\right)^2. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"acd-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"ACD statistic","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"ACD statistic defined simply absolute average difference two groups: \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\left| \\frac{1}{|\\mathcal{S}_1(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_1(\\mathbf{z})} Y_i - \\frac{1}{|\\mathcal{S}_2(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_2(\\mathbf{z})} Y_i \\right|. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"ols-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"OLS statistic","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"OLS statistic defined \\(F\\)-statistic significance \\(\\beta_2\\) OLS estimation following linear model: \\[\\begin{align*}     Y_i = \\beta_1 + \\beta_2 z_i + \\text{error}_i, \\end{align*}\\] \\(z_i\\) denotes \\(\\)-th element given treatment assignment vector \\(\\mathbf{z} = (z_1, \\dots, z_n)\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"simes-correction","dir":"Articles","previous_headings":"","what":"Simes’ Correction","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"Since multiple test statistics, desirable consider correction multiple testing. testinterference package, implement Simes’ correction. Specifically, letting \\(p^{(1)} \\le \\dots \\le p^{(s)}\\) denote ordered \\(p\\)-values obtained \\(s\\) different test statistics, reject null hypothesis \\(\\mathbb{H}_0\\) significance level \\(\\alpha\\) \\(p^{(j)} \\le j \\cdot \\alpha / s\\) \\(j = 1, \\dots, s\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/Fisher.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Testing Procedure: Fisher's Sharp Null Hypothesis","text":"Hoshino, T. Yanagi, T., 2023. Randomization test specification interference structure arXiv preprint arXiv:2301.05580. Link","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"vignette describes testing procedure implemented testinterference() function hypothesis = \"SUTVA\".","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"Consider finite population \\(n\\) units, \\([n] = \\{ 1, \\dots, n \\}\\). Let \\(\\mathbf{Z} = (Z_1, \\dots, Z_n)\\) denote \\(n\\)-dimensional binary vector realized treatment assignments. Suppose \\(\\mathbf{Z} \\sim \\mathbb{P}_{\\mathbf{Z}}\\) known assignment probability \\(\\mathbb{P}_{\\mathbf{Z}}\\) (.e., experimental design). instance, \\(\\mathbb{P}_{\\mathbf{Z}}\\) may Bernoulli randomization, complete randomization, stratified randomization, experimental designs. write set possible assignment patterns \\(\\mathcal{Z} = \\{ \\mathbf{z} \\\\{ 0, 1 \\}^n: \\mathbb{P}_{\\mathbf{Z}}(\\mathbf{z}) > 0 \\}\\). Let \\(\\mathbf{Y} = (Y_1, \\dots, Y_n)\\), \\(Y_i\\) denotes outcome variable unit \\(\\). Let \\(\\mathbf{} = (A_{ij})_{,j \\[n]}\\) adjacency matrix, \\(A_{ij} \\\\{ 0, 1 \\}\\) represents whether \\(j\\) affects \\(\\). set \\(A_{ii} = 0\\) \\(\\). \\(\\), set interacting peers defined \\(\\mathcal{P}_i = \\{ j \\[n]: A_{ij} = 1 \\}\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"null-hypothesis","dir":"Articles","previous_headings":"","what":"Null Hypothesis","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"treatment assignment \\(\\mathbf{z} = (z_1, \\dots, z_n)\\), consider two exposure mappings: \\[\\begin{align*}   E_i^0(\\mathbf{z}) & = z_i, \\\\   E_i^1(\\mathbf{z}) & = \\left( z_i, \\; \\max_{j \\\\mathcal{P}_i} z_j \\right). \\end{align*}\\] , second element latter exposure mapping corresponds whether least one treated peer. Let \\(E_i^0 = E_i^0(\\mathbf{Z})\\) \\(E_i^1 = E_i^1(\\mathbf{Z})\\) denote exposures computed realized treatment assignments \\(\\mathbf{Z}\\). exposure mapping \\(E^0\\) said correct potential outcome given \\(E_i^0 = e^0\\) well defined \\(\\). key insight behind randomization test discussed , \\(E^0\\) correct, \\(E^1\\) also correct. null hypothesis, write potential outcome given \\(E_i^1 = e^1\\) \\(y_i^1(e^1)\\). null hypothesis interest \\[\\begin{align*}     \\mathbb{H}_0: \\quad     \\text{exposure mapping $E^0$ correct.} \\end{align*}\\] states outcome unit determined one’s treatment assignment. find statistical evidence hypothesis, implies presence spillover effects.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"randomization-test","dir":"Articles","previous_headings":"","what":"Randomization Test","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"main idea behind testing null hypothesis check whether outcome distribution given \\(Z_i\\) \\(\\max_{j \\\\mathcal{P}_i} Z_j\\) depend \\(\\max_{j \\\\mathcal{P}_i} Z_j\\). specific, line notation Hoshino Yanagi (2023), let \\(\\tilde{\\mathcal{E}}_i^1 = \\{ (Z_i, 0), (Z_i, 1) \\}\\) \\(\\) \\(|\\mathcal{P}_i| > 0\\). , null hypothesis \\(\\mathbb{H}_0\\), \\[\\begin{align*}     Y_i = y_i^1(e^1)     \\quad     \\text{$e^1 \\\\tilde{\\mathcal{E}}_i^1$.} \\end{align*}\\] Thus, values \\(\\{ y_i^1(e^1): e^1 \\\\tilde{\\mathcal{E}}_i^1 \\}\\) identically imputable \\(Y_i\\). Given , using test statistics introduced , can test whether following equality \\(\\mathbb{H}_0\\) true: \\[\\begin{align*}     y_i^1(e_j^1) = y_i^1(e_k^1)     \\quad     \\text{$e_j^1, e_k^1 \\\\tilde{\\mathcal{E}}_i^1$.} \\end{align*}\\] reject null hypothesis find statistical evidence equality. discussed Hoshino Yanagi (2023), must carefully select appropriate subsets units treatment assignments, call focal sub-population (set focal units) focal assignments, respectively. null hypothesis considered , can construct focal sub-population \\(\\mathcal{S}\\) appropriate subset \\[\\begin{align*}   \\mathcal{N}(2) = \\left\\{ \\[n]: |\\mathcal{P}_i| > 0 \\right\\}. \\end{align*}\\] , given \\(\\mathcal{S}\\), set focal assignments defined \\[\\begin{align*}   \\mathcal{C}^{\\mathcal{S}} = \\left\\{ \\mathbf{z} \\\\mathcal{Z}: z_i = Z_i \\; \\text{$\\\\mathcal{S}$} \\right\\}, \\end{align*}\\] \\(z_i\\) denotes \\(\\)-th element \\(\\mathbf{z}\\). See Hoshino Yanagi (2023) details. Let \\(\\mathbf{Y}_{\\mathcal{S}} = (Y_i)_{\\\\mathcal{S}}\\) denote vector collects outcomes focal units. testing procedure follows: Choose test statistic \\(T(\\mathbf{z}, \\mathbf{y}_{\\mathcal{S}})\\). Compute \\(T(\\mathbf{Z}, \\mathbf{Y}_{\\mathcal{S}})\\) realized treatment assignment \\(\\mathbf{Z}\\) observed outcome vector \\(\\mathbf{Y}_{\\mathcal{S}}\\) focal units. Draw \\(\\mathbf{z}^{(r)}\\) independently \\(\\mathbb{P}_{\\mathbf{Z} | \\mathbf{Z} \\\\mathcal{C}^{\\mathcal{S}}}\\). Compute \\(T(\\mathbf{z}^{(r)}, \\mathbf{Y}_{\\mathcal{S}})\\) \\(\\mathbb{H}_0\\). Repeat two steps \\(R\\) times. Compute \\(p\\)-value \\[\\begin{align*}   \\text{$p$-value}   = \\frac{1}{R} \\sum_{r=1}^{R} \\mathbf{1}\\{ T(\\mathbf{z}^{(r)}, \\mathbf{Y}_{\\mathcal{S}}) \\ge T(\\mathbf{Z}, \\mathbf{Y}_{\\mathcal{S}}) \\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test Statistics","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"testinterference package, consider three test statistics. Kruskal-Wallis (KW) Average cross difference (ACD) Ordinary least squares (OLS) define statistics, add notations. given treatment assignment \\(\\mathbf{z}\\), partition focal sub-population \\(\\mathcal{S}\\) 2 groups: \\[\\begin{align*}     \\mathcal{S}_1(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\max_{j \\\\mathcal{P}_i} z_j = 0 \\right\\}, \\\\     \\mathcal{S}_2(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\max_{j \\\\mathcal{P}_i} z_j = 1 \\right\\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"kw-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"KW statistic","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"begin ranking \\((Y_i)_{\\\\mathcal{S}}\\) 1 \\(|\\mathcal{S}|\\). Let \\(v_i\\) rank \\(Y_i\\) \\(V_j(\\mathbf{z})\\) summation ranks group \\(\\mathcal{S}_j(\\mathbf{z})\\): \\(V_j(\\mathbf{z}) = \\sum_{\\\\mathcal{S}_j(\\mathbf{z})} v_i\\), \\(j = 1, 2\\). KW statistic compares average rank group \\(j\\), \\(V_j(\\mathbf{z}) / |\\mathcal{S}_j(\\mathbf{z})|\\), average rank entire \\(|\\mathcal{S}|\\), \\((|\\mathcal{S}| + 1) / 2\\): \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\frac{12}{|\\mathcal{S}| ( |\\mathcal{S}| + 1 )} \\sum_{j=1}^2 | \\mathcal{S}_j(\\mathbf{z}) | \\left( \\frac{ V_j(\\mathbf{z}) }{ |\\mathcal{S}_j(\\mathbf{z})| } - \\frac{|\\mathcal{S}| + 1}{2} \\right)^2. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"acd-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"ACD statistic","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"ACD statistic defined simply absolute average difference two groups: \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\left| \\frac{1}{|\\mathcal{S}_1(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_1(\\mathbf{z})} Y_i - \\frac{1}{|\\mathcal{S}_2(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_2(\\mathbf{z})} Y_i \\right|. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"ols-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"OLS statistic","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"OLS statistic defined \\(F\\)-statistic significance \\(\\beta_2\\) OLS estimation following linear model: \\[\\begin{align*}     Y_i = \\beta_0 + \\beta_1 z_i + \\beta_2 \\left( \\max_{j \\\\mathcal{P}_i} z_j \\right) + \\text{error}_i     \\qquad     \\text{$\\\\mathcal{S}$}, \\end{align*}\\] \\(z_i\\) denotes \\(\\)-th element given treatment assignment vector \\(\\mathbf{z} = (z_1, \\dots, z_n)\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"simes-correction","dir":"Articles","previous_headings":"","what":"Simes’ Correction","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"Since multiple test statistics, desirable consider correction multiple testing. testinterference package, implement Simes’ correction. Specifically, letting \\(p^{(1)} \\le \\dots \\le p^{(s)}\\) denote ordered \\(p\\)-values obtained \\(s\\) different test statistics, reject null hypothesis \\(\\mathbb{H}_0\\) significance level \\(\\alpha\\) \\(p^{(j)} \\le j \\cdot \\alpha / s\\) \\(j = 1, \\dots, s\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/SUTVA.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Testing Procedure: Stable Unit Treatment Value Assumption (SUTVA)","text":"Hoshino, T. Yanagi, T., 2023. Randomization test specification interference structure arXiv preprint arXiv:2301.05580. Link","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Testing Procedure: Exposure 1","text":"vignette describes testing procedure implemented testinterference() function hypothesis = \"exposure1\".","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Testing Procedure: Exposure 1","text":"Consider finite population \\(n\\) units, \\([n] = \\{ 1, \\dots, n \\}\\). Let \\(\\mathbf{Z} = (Z_1, \\dots, Z_n)\\) denote \\(n\\)-dimensional binary vector realized treatment assignments. Suppose \\(\\mathbf{Z} \\sim \\mathbb{P}_{\\mathbf{Z}}\\) known assignment probability \\(\\mathbb{P}_{\\mathbf{Z}}\\) (.e., experimental design). instance, \\(\\mathbb{P}_{\\mathbf{Z}}\\) may Bernoulli randomization, complete randomization, stratified randomization, experimental designs. write set possible assignment patterns \\(\\mathcal{Z} = \\{ \\mathbf{z} \\\\{ 0, 1 \\}^n: \\mathbb{P}_{\\mathbf{Z}}(\\mathbf{z}) > 0 \\}\\). Let \\(\\mathbf{Y} = (Y_1, \\dots, Y_n)\\), \\(Y_i\\) denotes outcome variable unit \\(\\). Let \\(\\mathbf{} = (A_{ij})_{,j \\[n]}\\) adjacency matrix, \\(A_{ij} \\\\{ 0, 1 \\}\\) represents whether \\(j\\) affects \\(\\). set \\(A_{ii} = 0\\) \\(\\). \\(\\), set interacting peers defined \\(\\mathcal{P}_i = \\{ j \\[n]: A_{ij} = 1 \\}\\). Let \\(\\bar{\\mathcal{P}}_i = \\mathcal{P}_i \\cup \\{ \\}\\) denote unit \\(\\)’s neighborhood.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"null-hypothesis","dir":"Articles","previous_headings":"","what":"Null Hypothesis","title":"Testing Procedure: Exposure 1","text":"treatment assignment \\(\\mathbf{z} = (z_1, \\dots, z_n)\\), consider two exposure mappings: \\[\\begin{align*}   E_i^0(\\mathbf{z}) & = \\max_{j \\\\bar{\\mathcal{P}}_i} z_j, \\\\   E_i^1(\\mathbf{z}) & = \\left( z_i, \\; \\max_{j \\\\mathcal{P}_i} z_j \\right). \\end{align*}\\] , former exposure mapping indicates whether least one treated unit neighborhood, second element latter exposure mapping corresponds whether least one treated peer. Let \\(E_i^0 = E_i^0(\\mathbf{Z})\\) \\(E_i^1 = E_i^1(\\mathbf{Z})\\) denote exposures computed realized treatment assignments \\(\\mathbf{Z}\\). exposure mapping \\(E^0\\) said correct potential outcome given \\(E_i^0 = e^0\\) well defined \\(\\). key insight behind randomization test discussed , \\(E^0\\) correct, \\(E^1\\) also correct. null hypothesis, write potential outcome given \\(E_i^1 = e^1\\) \\(y_i^1(e^1)\\). null hypothesis interest \\[\\begin{align*}     \\mathbb{H}_0: \\quad     \\text{exposure mapping $E^0$ correct.} \\end{align*}\\] states outcome unit determined whether least one treated unit one’s neighborhood. find statistical evidence hypothesis, implies unit’s treatment distinguished others’ treatments.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"randomization-test","dir":"Articles","previous_headings":"","what":"Randomization Test","title":"Testing Procedure: Exposure 1","text":"main idea behind testing null hypothesis check whether outcome distributions groups \\(E_i^1 = (1, 0)\\), \\(E_i^1 = (0, 1)\\), \\(E_i^1 = (1, 1)\\). specific, line notation Hoshino Yanagi (2023), let \\(\\tilde{\\mathcal{E}}_i^1 = \\{ (1, 0), (0, 1), (1, 1) \\}\\) \\(\\) \\(|\\mathcal{P}_i| > 0\\) \\(E_i^0 = 1\\). , null hypothesis \\(\\mathbb{H}_0\\), \\[\\begin{align*}     Y_i = y_i^1(e^1)     \\quad     \\text{$e^1 \\\\tilde{\\mathcal{E}}_i^1$.} \\end{align*}\\] Thus, values \\(\\{ y_i^1(e^1): e^1 \\\\tilde{\\mathcal{E}}_i^1 \\}\\) identically imputable \\(Y_i\\). Given , using test statistics introduced , can test whether following equality \\(\\mathbb{H}_0\\) true: \\[\\begin{align*}     y_i^1(e_j^1) = y_i^1(e_k^1)     \\quad     \\text{$e_j^1, e_k^1 \\\\tilde{\\mathcal{E}}_i^1$.} \\end{align*}\\] reject null hypothesis find statistical evidence equality. discussed Hoshino Yanagi (2023), must carefully select appropriate subsets units treatment assignments, call focal sub-population (set focal units) focal assignments, respectively. null hypothesis considered , can construct focal sub-population \\(\\mathcal{S}\\) appropriate subset \\[\\begin{align*}   \\mathcal{N}(3) = \\left\\{ \\[n]: |\\mathcal{P}_i| > 0, E_i^0 = 1 \\right\\}. \\end{align*}\\] , given \\(\\mathcal{S}\\), set focal assignments defined \\[\\begin{align*}   \\mathcal{C}^{\\mathcal{S}} = \\left\\{ \\mathbf{z} \\\\mathcal{Z}: \\max_{j \\\\bar{\\mathcal{P}}_i} z_j = \\max_{j \\\\bar{\\mathcal{P}}_i} Z_j \\; \\text{$\\\\mathcal{S}$} \\right\\}. \\end{align*}\\] See Hoshino Yanagi (2023) details. Let \\(\\mathbf{Y}_{\\mathcal{S}} = (Y_i)_{\\\\mathcal{S}}\\) denote vector collects outcomes focal units. testing procedure follows: Choose test statistic \\(T(\\mathbf{z}, \\mathbf{y}_{\\mathcal{S}})\\). Compute \\(T(\\mathbf{Z}, \\mathbf{Y}_{\\mathcal{S}})\\) realized treatment assignment \\(\\mathbf{Z}\\) observed outcome vector \\(\\mathbf{Y}_{\\mathcal{S}}\\) focal units. Draw \\(\\mathbf{z}^{(r)}\\) independently \\(\\mathbb{P}_{\\mathbf{Z} | \\mathbf{Z} \\\\mathcal{C}^{\\mathcal{S}}}\\). Compute \\(T(\\mathbf{z}^{(r)}, \\mathbf{Y}_{\\mathcal{S}})\\) \\(\\mathbb{H}_0\\). Repeat two steps \\(R\\) times. Compute \\(p\\)-value \\[\\begin{align*}   \\text{$p$-value}   = \\frac{1}{R} \\sum_{r=1}^{R} \\mathbf{1}\\{ T(\\mathbf{z}^{(r)}, \\mathbf{Y}_{\\mathcal{S}}) \\ge T(\\mathbf{Z}, \\mathbf{Y}_{\\mathcal{S}}) \\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test Statistics","title":"Testing Procedure: Exposure 1","text":"testinterference package, consider three test statistics. Kruskal-Wallis (KW) Average cross difference (ACD) Ordinary least squares (OLS) define statistics, add notations. given treatment assignment \\(\\mathbf{z}\\), partition focal sub-population \\(\\mathcal{S}\\) 3 groups: \\[\\begin{align*}     \\mathcal{S}_1(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\left( z_i, \\max_{j \\\\mathcal{P}_i} z_j \\right) = (1, 0) \\right\\}, \\\\     \\mathcal{S}_2(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\left( z_i, \\max_{j \\\\mathcal{P}_i} z_j \\right) = (0, 1) \\right\\}, \\\\     \\mathcal{S}_3(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\left( z_i, \\max_{j \\\\mathcal{P}_i} z_j \\right) = (1, 1) \\right\\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"kw-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"KW statistic","title":"Testing Procedure: Exposure 1","text":"begin ranking \\((Y_i)_{\\\\mathcal{S}}\\) 1 \\(|\\mathcal{S}|\\). Let \\(v_i\\) rank \\(Y_i\\) \\(V_j(\\mathbf{z})\\) summation ranks group \\(\\mathcal{S}_j(\\mathbf{z})\\): \\(V_j(\\mathbf{z}) = \\sum_{\\\\mathcal{S}_j(\\mathbf{z})} v_i\\), \\(j = 1, 2, 3\\). KW statistic compares average rank group \\(j\\), \\(V_j(\\mathbf{z}) / |\\mathcal{S}_j(\\mathbf{z})|\\), average rank entire \\(|\\mathcal{S}|\\), \\((|\\mathcal{S}| + 1) / 2\\): \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\frac{12}{|\\mathcal{S}| ( |\\mathcal{S}| + 1 )} \\sum_{j=1}^3 | \\mathcal{S}_j(\\mathbf{z}) | \\left( \\frac{ V_j(\\mathbf{z}) }{ |\\mathcal{S}_j(\\mathbf{z})| } - \\frac{|\\mathcal{S}| + 1}{2} \\right)^2. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"acd-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"ACD statistic","title":"Testing Procedure: Exposure 1","text":"ACD statistic defined simply average absolute average differences three groups: \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\frac{1}{3} \\sum_{(j,k) \\\\{ (1, 2), (1, 3), (2, 3) \\}} \\left| \\frac{1}{|\\mathcal{S}_j(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_j(\\mathbf{z})} Y_j - \\frac{1}{|\\mathcal{S}_k(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_k(\\mathbf{z})} Y_i \\right|. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"ols-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"OLS statistic","title":"Testing Procedure: Exposure 1","text":"OLS statistic defined \\(F\\)-statistic significance \\((\\beta_1, \\beta_2)\\) OLS estimation following linear model: \\[\\begin{align*}     Y_i = \\beta_0 + \\beta_1 z_i + \\beta_2 \\left( \\max_{j \\\\mathcal{P}_i} z_j \\right) + \\text{error}_i     \\qquad     \\text{$\\\\mathcal{S}$}, \\end{align*}\\] \\(z_i\\) denotes \\(\\)-th element given treatment assignment vector \\(\\mathbf{z} = (z_1, \\dots, z_n)\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"simes-correction","dir":"Articles","previous_headings":"","what":"Simes’ Correction","title":"Testing Procedure: Exposure 1","text":"Since multiple test statistics, desirable consider correction multiple testing. testinterference package, implement Simes’ correction. Specifically, letting \\(p^{(1)} \\le \\dots \\le p^{(s)}\\) denote ordered \\(p\\)-values obtained \\(s\\) different test statistics, reject null hypothesis \\(\\mathbb{H}_0\\) significance level \\(\\alpha\\) \\(p^{(j)} \\le j \\cdot \\alpha / s\\) \\(j = 1, \\dots, s\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure1.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Testing Procedure: Exposure 1","text":"Hoshino, T. Yanagi, T., 2023. Randomization test specification interference structure arXiv preprint arXiv:2301.05580. Link","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Testing Procedure: Exposure 2","text":"vignette describes testing procedure implemented testinterference() function hypothesis = \"exposure2\".","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Testing Procedure: Exposure 2","text":"Consider finite population \\(n\\) units, \\([n] = \\{ 1, \\dots, n \\}\\). Let \\(\\mathbf{Z} = (Z_1, \\dots, Z_n)\\) denote \\(n\\)-dimensional binary vector realized treatment assignments. Suppose \\(\\mathbf{Z} \\sim \\mathbb{P}_{\\mathbf{Z}}\\) known assignment probability \\(\\mathbb{P}_{\\mathbf{Z}}\\) (.e., experimental design). instance, \\(\\mathbb{P}_{\\mathbf{Z}}\\) may Bernoulli randomization, complete randomization, stratified randomization, experimental designs. write set possible assignment patterns \\(\\mathcal{Z} = \\{ \\mathbf{z} \\\\{ 0, 1 \\}^n: \\mathbb{P}_{\\mathbf{Z}}(\\mathbf{z}) > 0 \\}\\). Let \\(\\mathbf{Y} = (Y_1, \\dots, Y_n)\\), \\(Y_i\\) denotes outcome variable unit \\(\\). Let \\(\\mathbf{} = (A_{ij})_{,j \\[n]}\\) adjacency matrix, \\(A_{ij} \\\\{ 0, 1 \\}\\) represents whether \\(j\\) affects \\(\\). set \\(A_{ii} = 0\\) \\(\\). \\(\\), set interacting peers defined \\(\\mathcal{P}_i = \\{ j \\[n]: A_{ij} = 1 \\}\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"null-hypothesis","dir":"Articles","previous_headings":"","what":"Null Hypothesis","title":"Testing Procedure: Exposure 2","text":"treatment assignment \\(\\mathbf{z} = (z_1, \\dots, z_n)\\), consider two exposure mappings: \\[\\begin{align*}   E_i^0(\\mathbf{z}) & = \\left( z_i, \\; \\max_{j \\\\mathcal{P}_i} z_j \\right), \\\\   E_i^1(\\mathbf{z}) & = \\left( z_i, \\; \\sum_{j \\\\mathcal{P}_i} z_j \\right). \\end{align*}\\] , second element former exposure mapping corresponds whether least one treated peer. Let \\(E_i^0 = E_i^0(\\mathbf{Z})\\) \\(E_i^1 = E_i^1(\\mathbf{Z})\\) denote exposures computed realized treatment assignments \\(\\mathbf{Z}\\). exposure mapping \\(E^0\\) said correct potential outcome given \\(E_i^0 = e^0\\) well defined \\(\\). key insight behind randomization test discussed , \\(E^0\\) correct, \\(E^1\\) also correct. null hypothesis, write potential outcome given \\(E_i^1 = e^1\\) \\(y_i^1(e^1)\\). null hypothesis interest \\[\\begin{align*}     \\mathbb{H}_0: \\quad     \\text{exposure mapping $E^0$ correct.} \\end{align*}\\] states outcome unit determined unit’s treatment whether least one treated peer. find statistical evidence hypothesis, implies treatment status peer distinguished peers way.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"randomization-test","dir":"Articles","previous_headings":"","what":"Randomization Test","title":"Testing Procedure: Exposure 2","text":"main idea behind testing null hypothesis check whether outcome distributions groups different numbers treated peers. specific, line notation Hoshino Yanagi (2023), let \\(\\tilde{\\mathcal{E}}_i^1 = \\{ (Z_i, 1), (Z_i, 2), \\dots, (Z_i, \\kappa) \\}\\) \\(\\) \\(\\max_{j \\\\mathcal{P}_i} Z_j = 1\\) \\(|\\mathcal{P}_i| = \\kappa\\) \\(\\kappa \\ge 2\\). , null hypothesis \\(\\mathbb{H}_0\\), \\[\\begin{align*}     Y_i = y_i^1(e^1)     \\quad     \\text{$e^1 \\\\tilde{\\mathcal{E}}_i^1$.} \\end{align*}\\] Thus, values \\(\\{ y_i^1(e^1): e^1 \\\\tilde{\\mathcal{E}}_i^1 \\}\\) identically imputable \\(Y_i\\). Given , using test statistics introduced , can test whether following equality \\(\\mathbb{H}_0\\) true: \\[\\begin{align*}     y_i^1(e_j^1) = y_i^1(e_k^1)     \\quad     \\text{$e_j^1, e_k^1 \\\\tilde{\\mathcal{E}}_i^1$.} \\end{align*}\\] reject null hypothesis find statistical evidence equality. discussed Hoshino Yanagi (2023), must carefully select appropriate subsets units treatment assignments, call focal sub-population (set focal units) focal assignments, respectively. null hypothesis considered , can construct focal sub-population \\(\\mathcal{S}\\) appropriate subset \\[\\begin{align*}   \\mathcal{N}(\\kappa) = \\left\\{ \\[n]: \\max_{j \\\\mathcal{P}_i} Z_j = 1, \\; |\\mathcal{P}_i| = \\kappa \\right\\}. \\end{align*}\\] , given \\(\\mathcal{S}\\), set focal assignments defined \\[\\begin{align*}   \\mathcal{C}^{\\mathcal{S}} = \\left\\{ \\mathbf{z} \\\\mathcal{Z}: \\left( z_i, \\max_{j \\\\mathcal{P}_i} z_j \\right) = \\left( Z_i, \\max_{j \\\\mathcal{P}_i} Z_j \\right) \\; \\text{$\\\\mathcal{S}$} \\right\\}. \\end{align*}\\] See Hoshino Yanagi (2023) details. Let \\(\\mathbf{Y}_{\\mathcal{S}} = (Y_i)_{\\\\mathcal{S}}\\) denote vector collects outcomes focal units. testing procedure follows: Choose test statistic \\(T(\\mathbf{z}, \\mathbf{y}_{\\mathcal{S}})\\). Compute \\(T(\\mathbf{Z}, \\mathbf{Y}_{\\mathcal{S}})\\) realized treatment assignment \\(\\mathbf{Z}\\) observed outcome vector \\(\\mathbf{Y}_{\\mathcal{S}}\\) focal units. Draw \\(\\mathbf{z}^{(r)}\\) independently \\(\\mathbb{P}_{\\mathbf{Z} | \\mathbf{Z} \\\\mathcal{C}^{\\mathcal{S}}}\\). Compute \\(T(\\mathbf{z}^{(r)}, \\mathbf{Y}_{\\mathcal{S}})\\) \\(\\mathbb{H}_0\\). Repeat two steps \\(R\\) times. Compute \\(p\\)-value \\[\\begin{align*}   \\text{$p$-value}   = \\frac{1}{R} \\sum_{r=1}^{R} \\mathbf{1}\\{ T(\\mathbf{z}^{(r)}, \\mathbf{Y}_{\\mathcal{S}}) \\ge T(\\mathbf{Z}, \\mathbf{Y}_{\\mathcal{S}}) \\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test Statistics","title":"Testing Procedure: Exposure 2","text":"testinterference package, consider three test statistics. Kruskal-Wallis (KW) Average cross difference (ACD) Ordinary least squares (OLS) define statistics, add notations. given treatment assignment \\(\\mathbf{z}\\), partition focal sub-population \\(\\mathcal{S}\\) \\(\\kappa\\) groups: \\[\\begin{align*}     \\mathcal{S}_1(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\sum_{j \\\\mathcal{P}_i} z_j = 1 \\right\\}, \\\\     \\mathcal{S}_2(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\sum_{j \\\\mathcal{P}_i} z_j = 2 \\right\\}, \\\\     & \\vdots \\\\     \\mathcal{S}_{\\kappa}(\\mathbf{z}) & = \\left\\{ \\\\mathcal{S}: \\sum_{j \\\\mathcal{P}_i} z_j = \\kappa \\right\\}. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"kw-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"KW statistic","title":"Testing Procedure: Exposure 2","text":"begin ranking \\((Y_i)_{\\\\mathcal{S}}\\) 1 \\(|\\mathcal{S}|\\). Let \\(v_i\\) rank \\(Y_i\\) \\(V_j(\\mathbf{z})\\) summation ranks group \\(\\mathcal{S}_j(\\mathbf{z})\\): \\(V_j(\\mathbf{z}) = \\sum_{\\\\mathcal{S}_j(\\mathbf{z})} v_i\\), \\(j = 1, \\dots, \\kappa\\). KW statistic compares average rank group \\(j\\), \\(V_j(\\mathbf{z}) / |\\mathcal{S}_j(\\mathbf{z})|\\), average rank entire \\(|\\mathcal{S}|\\), \\((|\\mathcal{S}| + 1) / 2\\): \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\frac{12}{|\\mathcal{S}| ( |\\mathcal{S}| + 1 )} \\sum_{j=1}^{\\kappa} | \\mathcal{S}_j(\\mathbf{z}) | \\left( \\frac{ V_j(\\mathbf{z}) }{ |\\mathcal{S}_j(\\mathbf{z})| } - \\frac{|\\mathcal{S}| + 1}{2} \\right)^2. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"acd-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"ACD statistic","title":"Testing Procedure: Exposure 2","text":"ACD statistic defined simply average absolute average differences three groups: \\[\\begin{align*}     T(\\mathbf{z}, \\mathbf{Y})     = \\frac{2}{\\kappa (\\kappa - 1)} \\sum_{1 \\le j < k \\le \\kappa} \\left| \\frac{1}{|\\mathcal{S}_j(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_j(\\mathbf{z})} Y_j - \\frac{1}{|\\mathcal{S}_k(\\mathbf{z})|} \\sum_{\\\\mathcal{S}_k(\\mathbf{z})} Y_i \\right|. \\end{align*}\\]","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"ols-statistic","dir":"Articles","previous_headings":"Test Statistics","what":"OLS statistic","title":"Testing Procedure: Exposure 2","text":"OLS statistic defined \\(F\\)-statistic significance \\(\\beta_2\\) OLS estimation following linear model: \\[\\begin{align*}     Y_i = \\beta_0 + \\beta_1 z_i + \\beta_2 \\left( \\sum_{j \\\\mathcal{P}_i} z_j \\right) + \\text{error}_i     \\qquad     \\text{$\\\\mathcal{S}$}, \\end{align*}\\] \\(z_i\\) denotes \\(\\)-th element given treatment assignment vector \\(\\mathbf{z} = (z_1, \\dots, z_n)\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"simes-correction","dir":"Articles","previous_headings":"","what":"Simes’ Correction","title":"Testing Procedure: Exposure 2","text":"Since multiple test statistics, desirable consider correction multiple testing. testinterference package, implement Simes’ correction. Specifically, letting \\(p^{(1)} \\le \\dots \\le p^{(s)}\\) denote ordered \\(p\\)-values obtained \\(s\\) different test statistics, reject null hypothesis \\(\\mathbb{H}_0\\) significance level \\(\\alpha\\) \\(p^{(j)} \\le j \\cdot \\alpha / s\\) \\(j = 1, \\dots, s\\).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/exposure2.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Testing Procedure: Exposure 2","text":"Hoshino, T. Yanagi, T., 2023. Randomization test specification interference structure arXiv preprint arXiv:2301.05580. Link","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with the testinterference Package","text":"testinterference package provides tools test SUTVA several hypotheses spillover effects. Specifically, package enables perform randomization tests whether following null hypotheses plausible: Fisher: One’s outcome depend one’s treatment (.e., Fisher’s sharp null hypothesis). SUTVA: One’s outcome determined one’s treatment (.e., stable unit treatment value assumption). Exposure 1: One’s outcome determined whether least one treated unit one’s neighborhood including oneself. Exposure 2: One’s outcome determined one’s treatment whether least one treated peer. testing procedures developed Hoshino Yanagi (2023) “Randomization test specification interference structure”.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with the testinterference Package","text":"Get package GitHub:","code":"# install.packages(\"devtools\") # if necessary devtools::install_github(\"tkhdyanagi/testinterference\", build_vignettes = TRUE)"},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"package-function","dir":"Articles","previous_headings":"","what":"Package Function","title":"Getting Started with the testinterference Package","text":"testinterference package provides following function: testinterference(): Randomization tests following null hypotheses: (1) Fisher, (2) SUTVA, (3) Exposure 1, (4) Exposure 2.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"arguments","dir":"Articles","previous_headings":"Package Function","what":"Arguments","title":"Getting Started with the testinterference Package","text":"testinterference() function following arguments: Y: \\(n\\)-dimensional outcome vector Z: \\(n\\)-dimensional binary treatment assignment vector : \\(n \\times n\\), binary, possibly asymmetric, adjacency matrix. diagonal elements must zero. argument can NULL hypothesis = Fisher. Default NULL. hypothesis: character specifying null hypothesis interest. Options “Fisher”, “SUTVA”, “exposure1”, “exposure2”. “Fisher” stands sharp null hypothesis canonical Fisher randomization test. “SUTVA”, “exposure1”, “exposure2” correspond null hypotheses , b, c Table 2 Hoshino Yanagi (2023). Default “SUTVA”. hypothesis = \"exposure2\", user can specify argument kappa. method: character specifying find focal units. Options “MIS”, “random”, “manual”, stand method maximum independent set (MIS), random selection, manual selection. Default “MIS”. method = \"random\", user can specify argument num_focal_unit. method = \"manual\", user must specify argument focal_unit. design: character specifying randomization design original experiment. Options “Bernoulli”, “complete”, “stratified”, “”, stand Bernoulli randomization, complete randomization, stratified randomization, experimental designs. design = \"Bernoulli\", user must specify argument prob. design = \"stratified\",user must specify argument strata. design = \"\", user must specify argument zmatrix. prob: NULL, scalar indicating homogeneous probability treatment eligible, \\(n\\)-dimensional vector indicating heterogeneous probabilities treatment eligibility (.e., \\(\\)-th element prob indicates \\(\\Pr(Z_i = 1)\\)). argument used design = \"Bernoulli\". Default NULL. focal_unit: NULL \\(n\\)-dimensional logical vector specifying whether unit focal. argument used method = \"manual\". Default NULL. num_focal_unit: NULL positive scalar specifying number focal units. argument used method = \"random\". Default NULL. num_randomization: large positive integer specifying number randomization. Default 9999. argument used method = \"\". strata: NULL \\(n\\)-dimensional numerical vector indicating stratum unit belongs. argument used design = \"stratified\". Default NULL. zmatrix: NULL large matrix realizations treatment assignments. argument must specified user design = \"\". number rows must equal sample size \\(n\\). number columns number realizations given user. Default NULL. kappa: NULL positive integer less 2. argument used hypothesis = \"exposure2\". Default NULL. kappa = NULL, kappa automatically chosen maximize number focal units. cores: positive integer specifying number cores use parallel computing. Default 1.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"returns","dir":"Articles","previous_headings":"Package Function","what":"Returns","title":"Getting Started with the testinterference Package","text":"testinterference() function returns list containing following elements: pval: vector p-values obtained Kruskal-Wallis (KW), average cross difference (ACD), ordinary least squares (OLS) test statistics. Simes: vector testing results Simes’ correction significance levels 10%, 5%, 1%. TRUE (resp. FALSE) indicates rejection (resp. acceptance) null hypothesis. stat: matrix test statistics computed focal assignments. focal_unit: logical vector indicating whether unit focal. focal_asgmt: matrix focal assignments. num_focal_unit: number focal units. num_focal_asgmt: number focal assignments.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"example-1-a-single-large-network","dir":"Articles","previous_headings":"","what":"Example 1: A Single Large Network","title":"Getting Started with the testinterference Package","text":"begin generating artificial data using datageneration() function. datageneration() function, two options generate adjacency matrix: (1) Erdos-Renyi model (2) pairs. addition, three options experimental design: () Bernoulli randomization, (b) complete randomization, (c) stratified randomization. consider case (1)-() : , beta_s specifies value coefficient spillover effects outcome equation. beta_s = 0 means spillovers. example, consider case SUTVA hold. Run testinterference() function test SUTVA: , set num_randomization = 999 reduce computation time, realistic situations number randomization larger (e.g., num_randomization = 99999). p-values obtained Kruskal-Wallis (KW), average cross difference (ACD), ordinary least squares (OLS) test statistics : null hypothesis rejected standard significance level. words, find statistical evidence SUTVA implausible. results Simes’ correction : , TRUE indicates rejection null hypothesis. , results suggest SUTVA hold. can confirm numbers focal units assignments : Next, turn test whether exposure 2 correct. testing results : find statistical evidence exposure 2 incorrect.","code":"# Load the package library(testinterference)  # Sample size n <- 200  # Generate artificial data (Erdos-Renyi model) set.seed(1) data1 <- datageneration(n      = n,                         design = \"Bernoulli\",                         A      = \"Erdos-Renyi\",                         beta_s = 1) set.seed(1) RT1 <- testinterference(Y                 = data1$Y,                         Z                 = data1$Z,                         A                 = data1$A,                         hypothesis        = \"SUTVA\",                         method            = \"MIS\",                         design            = \"Bernoulli\",                         prob              = 0.5,                         focal_unit        = NULL,                         num_focal_unit    = NULL,                         num_randomization = 999,                         strata            = NULL,                         zmatrix           = NULL,                         kappa             = NULL,                         cores             = 1) RT1$pval #>    KW   ACD   OLS  #> 0.002 0.003 0.001 RT1$Simes #>  10%   5%   1%  #> TRUE TRUE TRUE RT1$num_focal_unit #> [1] 84 RT1$num_focal_asgmt #> [1] 1000 set.seed(1) RT2 <- testinterference(Y                 = data1$Y,                         Z                 = data1$Z,                         A                 = data1$A,                         hypothesis        = \"exposure2\",                         method            = \"MIS\",                         design            = \"Bernoulli\",                         prob              = 0.5,                         focal_unit        = NULL,                         num_focal_unit    = NULL,                         num_randomization = 999,                         strata            = NULL,                         zmatrix           = NULL,                         kappa             = NULL,                         cores             = 1) RT2$pval #>    KW   ACD   OLS  #> 0.003 0.001 0.012 RT2$Simes #>  10%   5%   1%  #> TRUE TRUE TRUE RT2$num_focal_unit #> [1] 34 RT2$num_focal_asgmt #> [1] 1000"},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"example-2-pairs","dir":"Articles","previous_headings":"","what":"Example 2: Pairs","title":"Getting Started with the testinterference Package","text":"turn case possible pairwise interactions complete randomization. consider case without interference, specify beta_s = 0. Perform randomization test: testing results : null hypothesis rejected standard significance level. results Simes’ correction, FALSE indicates acceptance null hypothesis. Thus, testing results suggest SUTVA might hold. case pairwise interactions, impossible perform randomization tests hypothesis = \"exposure2\". unit one peer \\(\\mathcal{N}(\\kappa)\\) empty \\(\\kappa \\ge 2\\). See vignette vignette(\"exposure2\", package = \"testinterference\") details.","code":"# Generate artificial data (Erdos-Renyi model) set.seed(1) data2 <- datageneration(n      = n,                         design = \"complete\",                         A      = \"pairs\",                         beta_s = 0) set.seed(1) RT3 <- testinterference(Y                 = data2$Y,                         Z                 = data2$Z,                         A                 = data2$A,                         hypothesis        = \"SUTVA\",                         method            = \"MIS\",                         design            = \"complete\",                         prob              = NULL,                         focal_unit        = NULL,                         num_focal_unit    = NULL,                         num_randomization = 999,                         strata            = NULL,                         zmatrix           = NULL,                         kappa             = NULL,                         cores             = 1) RT3$pval #>    KW   ACD   OLS  #> 0.226 0.265 0.513 RT3$Simes #>   10%    5%    1%  #> FALSE FALSE FALSE RT3$num_focal_unit #> [1] 100 RT3$num_focal_asgmt #> [1] 1000"},{"path":"https://tkhdyanagi.github.io/testinterference/articles/testinterference.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Started with the testinterference Package","text":"Hoshino, T. Yanagi, T., 2023. Randomization test specification interference structure arXiv preprint arXiv:2301.05580. Link","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tadao Hoshino. Author, copyright holder. Takahide Yanagi. Author, maintainer, copyright holder.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoshino T, Yanagi T (2023). testinterference: Randomization Test Specification Interference Structure. R package version 0.1.2, https://tkhdyanagi.github.io/testinterference/.","code":"@Manual{,   title = {testinterference: Randomization Test for the Specification of Interference Structure},   author = {Tadao Hoshino and Takahide Yanagi},   year = {2023},   note = {R package version 0.1.2},   url = {https://tkhdyanagi.github.io/testinterference/}, }"},{"path":"https://tkhdyanagi.github.io/testinterference/index.html","id":"testinterference-randomization-test-for-the-specification-of-interference-structure","dir":"","previous_headings":"","what":"Randomization Test for the Specification of Interference Structure ","title":"Randomization Test for the Specification of Interference Structure ","text":"testinterference package provides tools test several hypotheses spillover effects. Specifically, package enables perform randomization tests whether following null hypotheses plausible: Fisher: One’s outcome depend one’s treatment (.e., Fisher’s sharp null hypothesis). SUTVA: One’s outcome determined one’s treatment (.e., stable unit treatment value assumption). Exposure 1: One’s outcome determined whether least one treated unit one’s neighborhood including oneself. Exposure 2: One’s outcome determined one’s treatment whether least one treated peer. testing procedures developed Hoshino Yanagi (2023) “Randomization test specification interference structure”.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Randomization Test for the Specification of Interference Structure ","text":"Get package GitHub:","code":"# install.packages(\"devtools\") # if necessary devtools::install_github(\"tkhdyanagi/testinterference\", build_vignettes = TRUE)"},{"path":"https://tkhdyanagi.github.io/testinterference/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Randomization Test for the Specification of Interference Structure ","text":"details, see package vignettes :","code":"# Getting Started with the testinterference Package vignette(\"testinterference\")  # Testing Procedure: Fisher's Sharp Null Hypothesis vignette(\"Fisher\", package = \"testinterference\")  # Testing Procedure: SUTVA vignette(\"SUTVA\", package = \"testinterference\")  # Testing Procedure: Exposure 1 vignette(\"exposure1\", package = \"testinterference\")  # Testing Procedure: Exposure 2 vignette(\"exposure2\", package = \"testinterference\")"},{"path":"https://tkhdyanagi.github.io/testinterference/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Randomization Test for the Specification of Interference Structure ","text":"Hoshino, T. Yanagi, T., 2023. Randomization test specification interference structure arXiv preprint arXiv:2301.05580. Link","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/datageneration.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Artificial Data from Simulation — datageneration","title":"Generate Artificial Data from Simulation — datageneration","text":"Generate Artificial Data Simulation","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/datageneration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Artificial Data from Simulation — datageneration","text":"","code":"datageneration(   n,   design = \"complete\",   dgp = 1,   beta_d = 1,   beta_s = 0,   Y0 = NULL,   A = \"Erdos-Renyi\" )"},{"path":"https://tkhdyanagi.github.io/testinterference/reference/datageneration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Artificial Data from Simulation — datageneration","text":"n even number specifying sample size design character specifying randomization design. Options \"Bernoulli\", \"complete\", \"stratified\", stand Bernoulli randomization, complete randomization, stratified randomization. Default \"complete\". dgp Specify data generating process 1 2 outcome equation beta_d scalar specifying value coefficient direct effect outcome equation. direct effect beta_d set zero. beta_s scalar specifying value coefficient spillovers outcome equation. spillovers beta_s set zero. Y0 NULL n-dimensional vector untreated potential outcomes. Default NULL. n times n binary adjacency matrix character specifying generate adjacency matrix. latter case, options \"Erdos-Renyi\" \"pairs\". Default \"Erdos-Renyi\".","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/datageneration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Artificial Data from Simulation — datageneration","text":"list containing following elements. Y n-dimensional outcome vector Z n-dimensional treatment assignment vector n times n binary adjacency matrix strata n-dimensional vector indicating strata","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/datageneration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Artificial Data from Simulation — datageneration","text":"","code":"data <- datageneration(n = 200)"},{"path":"https://tkhdyanagi.github.io/testinterference/reference/testinterference.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomization Test for the Interference Structure — testinterference","title":"Randomization Test for the Interference Structure — testinterference","text":"Randomization test specification spillover effects utilizing hierarchical relationships different exposures","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/testinterference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomization Test for the Interference Structure — testinterference","text":"","code":"testinterference(   Y = NULL,   Z = NULL,   A = NULL,   hypothesis = \"SUTVA\",   method = \"MIS\",   design = \"complete\",   prob = NULL,   focal_unit = NULL,   num_focal_unit = NULL,   num_randomization = 9999,   strata = NULL,   zmatrix = NULL,   kappa = NULL,   cores = 1 )"},{"path":"https://tkhdyanagi.github.io/testinterference/reference/testinterference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomization Test for the Interference Structure — testinterference","text":"Y n-dimensional outcome vector Z n-dimensional binary treatment assignment vector n times n, binary, possibly asymmetric, adjacency matrix. diagonal elements must zero. argument can NULL `hypothesis = \"Fisher\"`. Default NULL. hypothesis character specifying null hypothesis interest. Options \"Fisher\", \"SUTVA\", \"exposure1\", \"exposure2\". \"Fisher\" stands Fisher's sharp null hypothesis canonical randomization test. \"SUTVA\", \"exposure1\", \"exposure2\" correspond null hypotheses , b, c Table 2 Hoshino Yanagi (2023). Default \"SUTVA\". `hypothesis = \"exposure2\"`, user can specify argument `kappa`. method character specifying find focal units. Options \"MIS\", \"random\", \"manual\", stand method maximum independent sets, random selection, manual selection. Default \"MIS\". `method = \"random\"`, user can specify argument `num_focal_unit`. `method = \"manual\"`, user must specify argument `focal_unit`. design character specifying randomization design original experiment. Options \"Bernoulli\", \"complete\", \"stratified\", \"\", stand Bernoulli randomization, complete randomization, stratified randomization, experimental designs. `design = \"Bernoulli\"`, user must specify argument `prob`. `design = \"stratified\"`,user must specify argument `strata`. `design = \"\"`, user must specify argument `zmatrix`. prob NULL, scalar indicating homogeneous probability treatment eligible, n-dimensional vector indicating heterogeneous probabilities treatment eligibility (.e., -th element `prob` indicates probability unit becomes treatment eligible). argument used `design = \"Bernoulli\"`. Default NULL. focal_unit NULL n-dimensional logical vector specifying whether unit focal. argument used `method = \"manual\"`. Default NULL. num_focal_unit NULL positive scalar specifying number focal units. argument used `method = \"random\"`. Default NULL. num_randomization large positive integer specifying number randomization. Default 9999. argument used `design = \"\"`. strata NULL n-dimensional numerical vector indicating stratum unit belongs. argument used `design = \"stratified\"`. Default NULL. zmatrix NULL large matrix realizations treatment assignments. argument must specified user `design = \"\"`. number rows must equal sample size n. number columns number realizations given user. Default NULL. kappa NULL positive integer less 2. argument used `hypothesis = \"exposure2\"`. `kappa = NULL`, kappa automatically chosen maximize number focal units. Default NULL. cores positive integer specifying number cores use parallel computing. Default 1.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/testinterference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomization Test for the Interference Structure — testinterference","text":"list containing following elements: pval vector p-values obtained KW, ACD, OLS statistics Simes vector testing results Simes’ correction significance levels 10 TRUE (resp. FALSE) indicates rejection (resp. acceptance) null hypothesis. stat matrix test statistics computed focal assignments focal_unit logical vector indicating whether unit focal focal_asgmt matrix focal assignments num_focal_unit number focal units num_focal_asgmt number focal assignments","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/testinterference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomization Test for the Interference Structure — testinterference","text":"`testinterference()` function performs randomization tests null hypotheses interference structure utilizing hierarchical relationships different exposures. null hypotheses interest following. (1) Fisher's sharp null hypothesis: One's outcome depend one's treatment. (2) Stable Unit Treatment Value Assumption (SUTVA): One's outcome determined one's treatment. (3) Exposure 1: One's outcome determined whether least one treated unit one's neighborhood including oneself. (4) Exposure 2: One's outcome determined one's treatment whether least one treated peer. testing procedures developed Hoshino Yanagi (2023).","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/testinterference.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Randomization Test for the Interference Structure — testinterference","text":"Hoshino, T., & Yanagi, T. (2023). Randomization Test Specification Interference Structure. arXiv preprint arXiv:2301.05580.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/reference/testinterference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomization Test for the Interference Structure — testinterference","text":"","code":"data <- datageneration(n = 200) test <- testinterference(Y = data$Y,                          Z = data$Z,                          A = data$A,                          hypothesis = \"SUTVA\",                          method = \"MIS\",                          design = \"complete\",                          num_randomization = 999,                          cores = 1)"},{"path":"https://tkhdyanagi.github.io/testinterference/news/index.html","id":"testinterference-012","dir":"Changelog","previous_headings":"","what":"testinterference 0.1.2","title":"testinterference 0.1.2","text":"Improved computational time hypothesis = exposure2.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/news/index.html","id":"testinterference-011","dir":"Changelog","previous_headings":"","what":"testinterference 0.1.1","title":"testinterference 0.1.1","text":"Added GitHub Pages.","code":""},{"path":"https://tkhdyanagi.github.io/testinterference/news/index.html","id":"testinterference-010","dir":"Changelog","previous_headings":"","what":"testinterference 0.1.0","title":"testinterference 0.1.0","text":"First development version.","code":""}]
